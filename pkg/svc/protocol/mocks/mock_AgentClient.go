// Code generated by mockery v2.42.3. DO NOT EDIT.

package protocolmock

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/Ivan-Feofanov/big-ear/pkg/svc/protocol"
)

// MockAgentClient is an autogenerated mock type for the AgentClient type
type MockAgentClient struct {
	mock.Mock
}

type MockAgentClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentClient) EXPECT() *MockAgentClient_Expecter {
	return &MockAgentClient_Expecter{mock: &_m.Mock}
}

// EvaluateAlert provides a mock function with given fields: ctx, in, opts
func (_m *MockAgentClient) EvaluateAlert(ctx context.Context, in *protocol.EvaluateAlertRequest, opts ...grpc.CallOption) (*protocol.EvaluateAlertResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateAlert")
	}

	var r0 *protocol.EvaluateAlertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateAlertRequest, ...grpc.CallOption) (*protocol.EvaluateAlertResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateAlertRequest, ...grpc.CallOption) *protocol.EvaluateAlertResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EvaluateAlertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.EvaluateAlertRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentClient_EvaluateAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateAlert'
type MockAgentClient_EvaluateAlert_Call struct {
	*mock.Call
}

// EvaluateAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - in *protocol.EvaluateAlertRequest
//   - opts ...grpc.CallOption
func (_e *MockAgentClient_Expecter) EvaluateAlert(ctx interface{}, in interface{}, opts ...interface{}) *MockAgentClient_EvaluateAlert_Call {
	return &MockAgentClient_EvaluateAlert_Call{Call: _e.mock.On("EvaluateAlert",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAgentClient_EvaluateAlert_Call) Run(run func(ctx context.Context, in *protocol.EvaluateAlertRequest, opts ...grpc.CallOption)) *MockAgentClient_EvaluateAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*protocol.EvaluateAlertRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAgentClient_EvaluateAlert_Call) Return(_a0 *protocol.EvaluateAlertResponse, _a1 error) *MockAgentClient_EvaluateAlert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentClient_EvaluateAlert_Call) RunAndReturn(run func(context.Context, *protocol.EvaluateAlertRequest, ...grpc.CallOption) (*protocol.EvaluateAlertResponse, error)) *MockAgentClient_EvaluateAlert_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluateBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAgentClient) EvaluateBlock(ctx context.Context, in *protocol.EvaluateBlockRequest, opts ...grpc.CallOption) (*protocol.EvaluateBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateBlock")
	}

	var r0 *protocol.EvaluateBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateBlockRequest, ...grpc.CallOption) (*protocol.EvaluateBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateBlockRequest, ...grpc.CallOption) *protocol.EvaluateBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EvaluateBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.EvaluateBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentClient_EvaluateBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateBlock'
type MockAgentClient_EvaluateBlock_Call struct {
	*mock.Call
}

// EvaluateBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *protocol.EvaluateBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAgentClient_Expecter) EvaluateBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAgentClient_EvaluateBlock_Call {
	return &MockAgentClient_EvaluateBlock_Call{Call: _e.mock.On("EvaluateBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAgentClient_EvaluateBlock_Call) Run(run func(ctx context.Context, in *protocol.EvaluateBlockRequest, opts ...grpc.CallOption)) *MockAgentClient_EvaluateBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*protocol.EvaluateBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAgentClient_EvaluateBlock_Call) Return(_a0 *protocol.EvaluateBlockResponse, _a1 error) *MockAgentClient_EvaluateBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentClient_EvaluateBlock_Call) RunAndReturn(run func(context.Context, *protocol.EvaluateBlockRequest, ...grpc.CallOption) (*protocol.EvaluateBlockResponse, error)) *MockAgentClient_EvaluateBlock_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluateTx provides a mock function with given fields: ctx, in, opts
func (_m *MockAgentClient) EvaluateTx(ctx context.Context, in *protocol.EvaluateTxRequest, opts ...grpc.CallOption) (*protocol.EvaluateTxResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateTx")
	}

	var r0 *protocol.EvaluateTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateTxRequest, ...grpc.CallOption) (*protocol.EvaluateTxResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.EvaluateTxRequest, ...grpc.CallOption) *protocol.EvaluateTxResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EvaluateTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.EvaluateTxRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentClient_EvaluateTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateTx'
type MockAgentClient_EvaluateTx_Call struct {
	*mock.Call
}

// EvaluateTx is a helper method to define mock.On call
//   - ctx context.Context
//   - in *protocol.EvaluateTxRequest
//   - opts ...grpc.CallOption
func (_e *MockAgentClient_Expecter) EvaluateTx(ctx interface{}, in interface{}, opts ...interface{}) *MockAgentClient_EvaluateTx_Call {
	return &MockAgentClient_EvaluateTx_Call{Call: _e.mock.On("EvaluateTx",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAgentClient_EvaluateTx_Call) Run(run func(ctx context.Context, in *protocol.EvaluateTxRequest, opts ...grpc.CallOption)) *MockAgentClient_EvaluateTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*protocol.EvaluateTxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAgentClient_EvaluateTx_Call) Return(_a0 *protocol.EvaluateTxResponse, _a1 error) *MockAgentClient_EvaluateTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentClient_EvaluateTx_Call) RunAndReturn(run func(context.Context, *protocol.EvaluateTxRequest, ...grpc.CallOption) (*protocol.EvaluateTxResponse, error)) *MockAgentClient_EvaluateTx_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx, in, opts
func (_m *MockAgentClient) HealthCheck(ctx context.Context, in *protocol.HealthCheckRequest, opts ...grpc.CallOption) (*protocol.HealthCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *protocol.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.HealthCheckRequest, ...grpc.CallOption) (*protocol.HealthCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.HealthCheckRequest, ...grpc.CallOption) *protocol.HealthCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentClient_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockAgentClient_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *protocol.HealthCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockAgentClient_Expecter) HealthCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockAgentClient_HealthCheck_Call {
	return &MockAgentClient_HealthCheck_Call{Call: _e.mock.On("HealthCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAgentClient_HealthCheck_Call) Run(run func(ctx context.Context, in *protocol.HealthCheckRequest, opts ...grpc.CallOption)) *MockAgentClient_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*protocol.HealthCheckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAgentClient_HealthCheck_Call) Return(_a0 *protocol.HealthCheckResponse, _a1 error) *MockAgentClient_HealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentClient_HealthCheck_Call) RunAndReturn(run func(context.Context, *protocol.HealthCheckRequest, ...grpc.CallOption) (*protocol.HealthCheckResponse, error)) *MockAgentClient_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx, in, opts
func (_m *MockAgentClient) Initialize(ctx context.Context, in *protocol.InitializeRequest, opts ...grpc.CallOption) (*protocol.InitializeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 *protocol.InitializeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InitializeRequest, ...grpc.CallOption) (*protocol.InitializeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InitializeRequest, ...grpc.CallOption) *protocol.InitializeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.InitializeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.InitializeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentClient_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockAgentClient_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *protocol.InitializeRequest
//   - opts ...grpc.CallOption
func (_e *MockAgentClient_Expecter) Initialize(ctx interface{}, in interface{}, opts ...interface{}) *MockAgentClient_Initialize_Call {
	return &MockAgentClient_Initialize_Call{Call: _e.mock.On("Initialize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAgentClient_Initialize_Call) Run(run func(ctx context.Context, in *protocol.InitializeRequest, opts ...grpc.CallOption)) *MockAgentClient_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*protocol.InitializeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAgentClient_Initialize_Call) Return(_a0 *protocol.InitializeResponse, _a1 error) *MockAgentClient_Initialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentClient_Initialize_Call) RunAndReturn(run func(context.Context, *protocol.InitializeRequest, ...grpc.CallOption) (*protocol.InitializeResponse, error)) *MockAgentClient_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAgentClient creates a new instance of MockAgentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentClient {
	mock := &MockAgentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
